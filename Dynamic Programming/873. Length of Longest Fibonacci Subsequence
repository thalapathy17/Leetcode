class Solution {
    public int lenLongestFibSubseq(int[] arr) {
        int res = 0;
        Set<Integer> set = new HashSet<>();
        for(int num: arr){
            set.add(num);
        }        

        for(int i = 0; i < arr.length - 1; i++){
            for(int j = i + 1; j < arr.length; j++){
                int prev = arr[i];
                int curr = arr[j];
                int nxt = prev + curr;
                int count = 2;
                while(set.contains(nxt)){
                    count += 1;
                    prev = curr;
                    curr = nxt;
                    nxt = prev + curr;
                    res = Math.max(res, count);
                }
            }
        }
        return res;
    }
}



class Solution {
    public int lenLongestFibSubseq(int[] arr) {
        int n = arr.length;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < n; i++){
            map.put(arr[i], i);
        }
        int res = 0;
        int[][] dp = new int[n][n];
        for(int i = n-2; i >= 0; i--){
            for(int j = n-1; j > i; j--){
                long prev = arr[i];
                long curr = arr[j];
                long nxt = prev + curr;
                int length = 2;
                if(nxt <= Integer.MAX_VALUE && map.containsKey((int)nxt)){
                    int nxtInd = map.get((int)nxt);
                    length = 1 + dp[j][nxtInd];
                    res = Math.max(res, length);
                }
                dp[i][j] = length;
            }
        }
        return res;
    }
}
