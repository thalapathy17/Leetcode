class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        Arrays.sort(envelopes, (a,b) -> a[0] == b[0] ? b[1] - a[1]: a[0] - b[0]);
        int n = envelopes.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        int max = 1;
        for(int i = 1; i < n; i++){
            for(int j = 0; j < i; j++){
                if(envelopes[i][0] > envelopes[j][0] && envelopes[i][1] > envelopes[j][1]){
                    dp[i] = Math.max(dp[i], 1 + dp[j]);
                }
            }
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}


class Solution {
    public int maxEnvelopes(int[][] envelopes) {
       Arrays.sort(envelopes, (a,b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
       int n = envelopes.length;
       TreeSet<Integer> set = new TreeSet<>();
       for(int i = 0; i < n; i++){
            int height = envelopes[i][1];
            if(set.isEmpty() || height > set.last()){
                set.add(height);
            }else{
                int replace = set.ceiling(height);
                set.remove(replace);
                set.add(height);
            }
        }
        return set.size(); 
    }
}