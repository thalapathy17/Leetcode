class Solution {
    Map<Integer, Integer> memo = new HashMap<>();
    public int numSquares(int n) {
        return dfs(n);
    }
    private int dfs(int n){
        if(n == 0) return 0;
        if(memo.containsKey(n)){
            return memo.get(n);
        }
        int mini = Integer.MAX_VALUE;
        for(int i = 1; i*i <= n; i++){
            mini = Math.min(mini,1 + dfs(n - i*i));
        }
        memo.put(n, mini);
        return memo.get(n);
    }
}



class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, n + 1);
        dp[0] = 0;

        for(int i = 1; i <= n; i++){
            for(int j = 1; j*j <= i; j++){
                dp[i] = Math.min(dp[i],1 + dp[i - j*j]);
            }
        }
        return dp[n];
    }
}