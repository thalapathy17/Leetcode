class Solution {
    Map<String, Integer> memo = new HashMap<>();
    public int change(int amount, int[] coins) {

        return dfs(0, amount, coins);
    }
    private int dfs(int i, int amount, int[] coins){
       
        if(amount == 0) return 1;
        if(amount < 0 || i == coins.length) return 0;
        String key = i + "-" + amount;
        if(memo.containsKey(key)){
            return memo.get(key);
        }
        int value = dfs(i, amount - coins[i], coins) + dfs(i + 1, amount, coins);
        memo.put(key, value);
        return memo.get(key);
    }
}

class Solution {
    public int change(int amount, int[] coins) {
      
        int[] dp = new int[amount + 1];
        dp[0] = 1;

        for(int coin: coins){
            for(int i = coin; i <= amount; i++){
                dp[i] += dp[i - coin];
            }
        }
        return dp[amount];
    }
}