class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[] LIS = new int[n];
        Arrays.fill(LIS, 1);

        for(int i = n-1; i >= 0; i--){
            for(int j = i + 1; j < n; j++){
                if(nums[i] < nums[j]){
                    LIS[i] = Math.max(LIS[i], 1 + LIS[j]);
                }
            }
        }      
        return Arrays.stream(LIS).max().getAsInt();
    }
}


class Solution {
    public int lengthOfLIS(int[] nums) {
        List<Integer> lst = new ArrayList<>();
        int LIS = 1;
        lst.add(nums[0]);
        for(int i = 1; i < nums.length; i++){
            if(lst.get(lst.size() -1) < nums[i]){
                lst.add(nums[i]);
                LIS++;
                continue;
            }
            int idx = Collections.binarySearch(lst, nums[i]);
            if(idx < 0) idx = -idx -1;
            lst.set(idx, nums[i]);
        }
        return LIS;
    }
}