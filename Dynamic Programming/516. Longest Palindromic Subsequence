class Solution {
    public int longestPalindromeSubseq(String s) {
        String rev = new StringBuilder(s).reverse().toString();
        int m = s.length();
        int[][] dp = new int[m + 1][m + 1];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < m; j++){
                dp[i][j] = -1;
            }
        }
        return dfs(s, rev, 0, 0, dp);
    }
    private int dfs(String s, String rev, int i, int j, int[][] dp){
        if(i == s.length() || j == rev.length()) return 0;
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        if(s.charAt(i) == rev.charAt(j)){
            dp[i][j] = 1 + dfs(s, rev, i + 1, j + 1, dp);
        }else {
            dp[i][j] = Math.max(dfs(s, rev, i + 1, j, dp), dfs(s, rev, i, j + 1, dp));
        }
        return dp[i][j];
    }
}