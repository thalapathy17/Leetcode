class Solution {

    public int minCut(String s) {
        int[] dp = new int[s.length()];
        Arrays.fill(dp, -1);
        return helper(0, s, dp) - 1;
    }
    private int helper(int i, String s, int[] dp){
        if(i == s.length()) return 0;
        if(dp[i] != -1) return dp[i];
        int minCost = Integer.MAX_VALUE;
        for(int j = i; j < s.length(); j++){
            
            if(isPalindrome(s.substring(i, j+1))){
                int cost = 1 + helper(j + 1, s, dp);
                minCost = Math.min(cost, minCost);
            }
        }
        dp[i] = minCost;
        return dp[i];
    }
    private boolean isPalindrome(String str){
        int x = 0, y = str.length() - 1;
        while(x < y){
            if(str.charAt(x++) != str.charAt(y--)) return false;
        }
        return true;
    }
}
