class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        Map<Integer, List<int[]>> edges = new HashMap<>();
        for(int[] time: times){
            edges.computeIfAbsent(time[0], key -> new ArrayList<>()).add(new int[]{time[1], time[2]});
        }

        PriorityQueue<int[]> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        minHeap.add(new int[]{0, k});
        Set<Integer> visit = new HashSet<>();
        int t = 0;
        while(!minHeap.isEmpty()){
            int[] curr = minHeap.poll();
            int w1 = curr[0], n1 = curr[1];
            if(visit.contains(n1)){
                continue;
            }
            t = w1;
            visit.add(n1);
            if(edges.containsKey(n1)){
                for(int[] nei: edges.get(n1)){
                    int w2 = nei[1] , n2 = nei[0];
                    if(!visit.contains(n2)){
                    minHeap.add(new int[]{w1 + w2, n2});
                    }
                }    
            }
        }
        return visit.size() == n ? t: -1;
    }
}