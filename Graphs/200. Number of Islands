class Solution {
    boolean[][] visit;
    int numIsland;
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        for(int r = 0; r < m; r++){
            for(int c = 0; c < n; c++){
                if(!visit[r][c] && grid[r][c] == '1'){
                    dfs(r, c, grid);
                    numIsland++;
                }
            }
        }
        return numIsland;
    }
    private void dfs(int i, int j, char[][] grid){
        if( i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == '0' || visit[i][j]){
            return;
        }
        visit[i][j] = true;
        dfs(i+1, j, grid);
        dfs(i-1, j, grid);
        dfs(i, j+1, grid);
        dfs(i, j-1, grid);
    }
}