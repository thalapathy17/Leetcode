public class Solution {
    
    public boolean validTree(int n, int[][] edges) {
        // write your code here
        if(edges.length > n - 1){
            return false;
        }
        List<List<Integer>> adj = new ArrayList<>();
        for(int i = 0; i < n; i++){
            adj.add(new ArrayList<>());
        }
        for(int[] edge: edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        Queue<int[]> q = new LinkedList<>();
        Set<Integer> visit = new HashSet<>();
        q.add(new int[]{0, -1});
        visit.add(0);
        while(!q.isEmpty()){
            int[] curr = q.poll();
            int node = curr[0], parent = curr[1];
            for(int nei: adj.get(node)){
                if(nei == parent){
                    continue;
                }
                if(visit.contains(nei)){
                    return false;
                }
                visit.add(nei);
                q.add(new int[]{nei, node});
            }
        }
        return visit.size() == n;
    }
}