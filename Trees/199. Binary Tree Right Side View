/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null) return res;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode rightNode = null;
            int qLen = q.size();
            for(int i = 0; i < qLen; i++){
                TreeNode node = q.poll();
                if(node != null){
                    rightNode = node;
                    q.add(node.left);
                    q.add(node.right);
                }
            }
            if(rightNode != null) res.add(rightNode.val);
        }
        return res;
    }
}

class Solution {
    List<Integer> res;
    public List<Integer> rightSideView(TreeNode root) {
        res = new ArrayList<>();
        dfs(root, 0);
        return res;   
    }
    private void dfs(TreeNode node, int depth){
        if(node == null) return;
        if(depth == res.size()) res.add(node.val);
        dfs(node.right, depth + 1);
        dfs(node.left, depth + 1);
    }
}
