class Solution {
    public int minMeetingRooms(int[][] intervals) {
        int n = intervals.length;
        int[] start = new int[n];
        int[] end = new int[n];

        for(int i = 0; i < n; i++){
            start[i] = intervals[i][0];
            end[i] = intervals[i][1];
        }

        Arrays.sort(start);
        Arrays.sort(end);

        int s = 0, e = 0, res = 0, count = 0;
        while(s < n){
            if(start[s] < end[e]){
                count++;
                s++;
            }else{
                count--;
                e++;
            }
            res = Math.max(res, count);
        }
        return res;
    }
}

class Solution {
    public int minMeetingRooms(int[][] intervals) {
       
        Arrays.sort(intervals, (a,b) -> Integer.compare(a[0], b[0]));
        PriorityQueue<Integer> minH = new PriorityQueue<>();

        for(int[] interval: intervals){
            if(!minH.isEmpty() && minH.peek() <= interval[0]){
                minH.poll();
            }
            minH.add(interval[1]);
        }
        return minH.size();
    }
}