class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> count = new HashMap<>();

        for(int num:nums){
            count.put(num, count.getOrefault(num, 0) + 1);
        }
        List<int[]> arr = new ArrayList<>();
        for(Map.Entry<Integer, Integer> entry: count.entrySet()){
            arr.add(new int[]{entry.getValue(), entry.getKey()});
        }
        int[] res = new int[k];
        for(int i = 0; i < k; i++){
            res[i] = arr.get(i)[1];
        }
        return res;
    }
}

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> count = new HashMap<>();
        for(int num: nums){
            count.put(num, count.getOrDefault(num, 0) + 1);
        }
        PriorityQueue<int[]> maxH = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for(Map.Entry<Integer, Integer> entry: count.entrySet()){
            maxH.add(new int[]{entry.getValue(), entry.getKey()});
            if(maxH.size() > k){
                maxH.poll();
            }
        }       
        int[] res = new int[k];
        for(int i = 0; i < k; i++){
            res[i] = maxH.poll()[1];
        }
        return res;
    }
}